{"version":3,"sources":["webpack:///./assets/js/theme/account.js","webpack:///./assets/js/theme/common/models/forms.js","webpack:///./assets/js/theme/common/form-utils.js","webpack:///./assets/js/theme/common/state-country.js","webpack:///./assets/js/theme/common/form-validation.js","webpack:///./assets/js/theme/common/payment-method.js"],"names":["Account","context","$state","$","$body","onReady","$editAccountForm","classifyForm","$addressForm","$inboxForm","$accountReturnForm","$paymentMethodForm","$reorderForm","$invoiceButton","this","passwordRequirements","Wishlist","load","length","registerEditAccountValidation","is","insertStateHiddenField","on","left","window","screen","availWidth","top","availHeight","url","data","open","initAddressFormValidation","registerInboxValidation","initAccountReturnFormValidation","initPaymentMethodFormValidation","initReorderForm","bindDeleteAddress","bindDeletePaymentMethod","event","message","currentTarget","confirm","preventDefault","$productReorderCheckboxes","submitForm","find","remove","each","index","productCheckbox","productId","val","$input","type","name","value","append","swal","text","selectItem","$last","validationModel","validation","$stateElement","addressValidator","nod","submit","add","stateCountry","err","field","Error","$field","getStatus","Validators","setStateCountryValidation","cleanUpStateValidation","performCheck","areAll","errorMessage","formSubmit","i","ele","parseInt","attr","firstNameLabel","lastNameLabel","companyLabel","phoneLabel","address1Label","address2Label","cityLabel","countryLabel","chooseCountryLabel","stateLabel","postalCodeLabel","cardType","paymentMethodSelector","paymentMethodValidator","target","creditCardType","siblings","css","CCValidators","setCreditCardNumberValidation","creditCardNumber","setExpirationValidation","expiration","setNameOnCardValidation","nameOnCard","setCvvValidation","cvv","CCFormatters","setCreditCardNumberFormat","setExpirationFormat","serializeArray","obj","item","refObj","country","countries","state","states","country_code","code","state_or_province_code","default_instrument","storeInstrument","location","href","paymentMethodsUrl","generic_error","formEditSelector","editValidator","emailSelector","$emailElement","passwordSelector","$passwordElement","password2Selector","$password2Element","$currentPassword","setEmailValidation","setPasswordValidation","selector","validate","cb","result","currentPassword","firstName","lastName","inboxValidator","Number","enterOrderNum","enterSubject","enterMessage","PageManager","forms","email","test","password","notEmpty","inputTagNames","formSelector","options","$form","$inputs","join","formFieldClass","__","input","specificClassName","$formField","parent","tagName","prop","toLowerCase","className","inputType","addClass","classifyInput","$stateField","stateFieldAttrs","fieldId","match","getFieldId","after","validator","requirements","isOptional","$password","passwordValidations","RegExp","alpha","numeric","minlength","error","setMinMaxPriceValidation","selectors","errorSelector","fieldsetSelector","maxPriceSelector","minPriceSelector","configure","form","preventSubmit","successClass","setMessageOptions","errorSpan","$fieldClassElement","Object","keys","classes","forEach","hasClass","removeClass","stateElement","callback","countryName","utils","api","getByName","response","showAlertModal","state_error","$currentInput","newElement","attrs","ret","replacementAttributes","id","class","replaceWith","$newElement","prev","hide","makeStateOptional","$selectElement","$hiddenInput","required","show","makeStateRequired","statesArray","container","push","prefix","stateObj","useIdForStates","html","addOptions","buildValidation","$validateableElement","fieldValidations","formFieldSelector","dateValidation","min_date","max_date","invalidMessage","formElementId","minSplit","split","maxSplit","minDate","Date","maxDate","triggeredBy","day","month","year","chosenDate","buildDateValidation","element","$inputElement","get","inputName","elementSelector","label","min","max","numberVal","buildNumberRangeValidation","buildRequiredValidation","formFieldId","secondarySelector","checkbox","checked","buildRequiredCheckboxValidation","validationsToPerform","concat","creditcards","card","parse","done","fail","paymentsUrl","shopperId","storeHash","vaultToken","provider_id","credit_card_number","name_on_card","address1","address2","city","postal_code","company","first_name","last_name","phone","expiry","ajax","dataType","method","cache","headers","Authorization","Accept","JSON","stringify","instrument","cardholder_name","number","expiry_month","expiry_year","verification_value","billing_address","key","Formatters","format","which","refTarget","slice","replace","isValid","isPast","cvc"],"mappings":"uRAUqBA,E,oBACjB,WAAYC,GAAS,aACjB,cAAMA,IAAN,MAEKC,OAASC,EAAE,6BAChB,EAAKC,MAAQD,EAAE,QAJE,E,kHAOrBE,QAAA,WACI,IAAMC,EAAmBC,YAAa,gCAChCC,EAAeD,YAAa,2BAC5BE,EAAaF,YAAa,yBAC1BG,EAAqBH,YAAa,8BAClCI,EAAqBJ,YAAa,kCAClCK,EAAeL,YAAa,+BAC5BM,EAAiBV,EAAE,wBAGzBW,KAAKC,qBAAuBD,KAAKb,QAAQc,qBAGzCC,UAASC,KAAKH,KAAKb,SAEfK,EAAiBY,SACjBJ,KAAKK,8BAA8Bb,GAC/BQ,KAAKZ,OAAOkB,GAAG,UACfC,YAAuBP,KAAKZ,SAIhCW,EAAeK,QACfL,EAAeS,GAAG,SAAS,WACvB,IAAMC,EAAOC,OAAOC,OAAOC,WAAa,EAAI,IACtCC,EAAMH,OAAOC,OAAOG,YAAc,EAAI,IACtCC,EAAMhB,EAAeiB,KAAK,gBAEhCN,OAAOO,KAAKF,EAAK,eAAjB,6BAA8DN,EAA9D,QAA0EI,EAA1E,oBAIJnB,EAAaU,SACbJ,KAAKkB,0BAA0BxB,GAE3BM,KAAKZ,OAAOkB,GAAG,UACfC,YAAuBP,KAAKZ,SAIhCO,EAAWS,QACXJ,KAAKmB,wBAAwBxB,GAG7BC,EAAmBQ,QACnBJ,KAAKoB,gCAAgCxB,GAGrCC,EAAmBO,QACnBJ,KAAKqB,gCAAgCxB,GAGrCC,EAAaM,QACbJ,KAAKsB,gBAAgBxB,GAGzBE,KAAKuB,oBACLvB,KAAKwB,2B,EAMTD,kBAAA,WACIlC,EAAE,yBAAyBmB,GAAG,UAAU,SAAAiB,GACpC,IAAMC,EAAUrC,EAAEoC,EAAME,eAAeX,KAAK,iBAEvCN,OAAOkB,QAAQF,IAChBD,EAAMI,qB,EAKlBL,wBAAA,WACInC,EAAE,gCAAgCmB,GAAG,UAAU,SAAAiB,GAC3C,IAAMC,EAAUrC,EAAEoC,EAAME,eAAeX,KAAK,uBAEvCN,OAAOkB,QAAQF,IAChBD,EAAMI,qB,EAKlBP,gBAAA,SAAgBxB,GAAc,WAC1BA,EAAaU,GAAG,UAAU,SAAAiB,GACtB,IAAMK,EAA4BzC,EAAE,4CAChC0C,GAAa,EAEjBjC,EAAakC,KAAK,yBAAyBC,SAE3CH,EAA0BI,MAAK,SAACC,EAAOC,GACnC,IAAMC,EAAYhD,EAAE+C,GAAiBE,MAC/BC,EAASlD,EAAE,UAAW,CACxBmD,KAAM,SACNC,KAAM,eAAeJ,EAAjB,IACJK,MAAO,MAGXX,GAAa,EAEbjC,EAAa6C,OAAOJ,MAGnBR,IACDN,EAAMI,iBACNe,YAAK,CACDC,KAAM,EAAK1D,QAAQ2D,WACnBN,KAAM,e,EAMtBtB,0BAAA,SAA0BxB,GACtB,IAUQqD,EAVFC,EAAkBC,YAAWvD,GAE7BwD,EAAgB7D,EADA,qDAEhB8D,EAAmBC,YAAI,CACzBC,OAAQ,kDAGZF,EAAiBG,IAAIN,GAEjBE,IAIAK,YAAaL,EAAelD,KAAKb,SAAS,SAACqE,EAAKC,GAC5C,GAAID,EACA,MAAM,IAAIE,MAAMF,GAGpB,IAAMG,EAAStE,EAAEoE,GAEiC,cAA9CN,EAAiBS,UAAUV,IAC3BC,EAAiBlB,OAAOiB,GAGxBH,GACAI,EAAiBlB,OAAOc,GAGxBY,EAAOrD,GAAG,WACVyC,EAAQU,EACRI,IAAWC,0BAA0BX,EAAkBM,IAEvDI,IAAWE,uBAAuBN,MAK9C/D,EAAac,GAAG,UAAU,SAAAiB,GACtB0B,EAAiBa,eAEbb,EAAiBc,OAAO,UAI5BxC,EAAMI,qB,EAIdT,gCAAA,SAAgCxB,GAC5B,IAAMsE,EAAetE,EAAmBoB,KAAK,0BAE7CpB,EAAmBY,GAAG,UAAU,SAAAiB,GAC5B,IAAI0C,GAAa,EAYjB,OATA9E,EAAE,uBAAwBO,GAAoBsC,MAAK,SAACkC,EAAGC,GACnD,GAAmC,IAA/BC,SAASjF,EAAEgF,GAAK/B,MAAO,IAIvB,OAHA6B,GAAa,GAGN,OAIXA,IAIJvB,YAAK,CACDC,KAAMqB,EACN1B,KAAM,UAGHf,EAAMI,sB,EAIrBR,gCAAA,SAAgCxB,GAAoB,WAEhDA,EAAmBmC,KAAK,0BAA0BuC,KAAK,kBAAvD,qCAA+GvE,KAAKb,QAAQqF,eAA5H,yCACA3E,EAAmBmC,KAAK,yBAAyBuC,KAAK,kBAAtD,qCAA8GvE,KAAKb,QAAQsF,cAA3H,yCACA5E,EAAmBmC,KAAK,uBAAuBuC,KAAK,kBAApD,qCAA4GvE,KAAKb,QAAQuF,aAAzH,0CACA7E,EAAmBmC,KAAK,qBAAqBuC,KAAK,kBAAlD,qCAA0GvE,KAAKb,QAAQwF,WAAvH,0CACA9E,EAAmBmC,KAAK,wBAAwBuC,KAAK,kBAArD,qCAA6GvE,KAAKb,QAAQyF,cAA1H,yCACA/E,EAAmBmC,KAAK,wBAAwBuC,KAAK,kBAArD,qCAA6GvE,KAAKb,QAAQ0F,cAA1H,0CACAhF,EAAmBmC,KAAK,oBAAoBuC,KAAK,kBAAjD,qCAAyGvE,KAAKb,QAAQ2F,UAAtH,yCACAjF,EAAmBmC,KAAK,uBAAuBuC,KAAK,kBAApD,uCAA8GvE,KAAKb,QAAQ4F,aAA3H,iCAAwK/E,KAAKb,QAAQ6F,mBAArL,OACAnF,EAAmBmC,KAAK,qBAAqBuC,KAAK,kBAAlD,qCAA0GvE,KAAKb,QAAQ8F,WAAvH,yCACApF,EAAmBmC,KAAK,2BAA2BuC,KAAK,kBAAxD,qCAAgHvE,KAAKb,QAAQ+F,gBAA7H,yCAEA,IAKInC,EA0BAoC,EA/BEnC,EAAkBC,YAAWpD,GAC7BuF,EAAwB,iCACxBC,EAAyBjC,YAAI,CAAEC,OAAW+B,EAAL,0BACrClC,EAAgB7D,EAAK+F,EAAJ,8BAIvB7B,YAAaL,EAAelD,KAAKb,SAAS,SAACqE,EAAKC,GAC5C,GAAID,EACA,MAAM,IAAIE,MAAMF,GAGpB,IAAMG,EAAStE,EAAEoE,GAEuC,cAApD4B,EAAuBzB,UAAUV,IACjCmC,EAAuBpD,OAAOiB,GAG9BH,GACAsC,EAAuBpD,OAAOc,GAG9BY,EAAOrD,GAAG,WACVyC,EAAQU,EACRI,IAAWC,0BAA0BuB,EAAwB5B,IAE7DI,IAAWE,uBAAuBN,MAM1CpE,EAAK+F,EAAJ,qCAA8D5E,GAAG,SAAS,YAAgB,IAAb8E,EAAa,EAAbA,QAC1EH,EAAWI,YAAeD,EAAO5C,QAE7BrD,EAAK+F,EAAJ,aAAsCD,EAAtC,KAAmDK,WAAWC,IAAI,UAAW,MAE9EpG,EAAK+F,EAAJ,QAAiCK,IAAI,UAAW,QAKzDC,IAAaC,8BAA8BN,EAA2BD,EAAtE,oCAAgIpF,KAAKb,QAAQyG,kBAC7IF,IAAaG,wBAAwBR,EAA2BD,EAAhE,4BAAkHpF,KAAKb,QAAQ2G,YAC/HJ,IAAaK,wBAAwBV,EAA2BD,EAAhE,8BAAoHpF,KAAKb,QAAQ6G,YACjIN,IAAaO,iBAAiBZ,EAA2BD,EAAzD,qBAAoGpF,KAAKb,QAAQ+G,KAAK,kBAAMf,KAG5HgB,IAAaC,0BAA6BhB,EAA1C,qCACAe,IAAaE,oBAAuBjB,EAApC,4BAGAC,EAAuB/B,IAAIN,GAE3BnD,EAAmBW,GAAG,UAAU,SAAAiB,GAI5B,GAHAA,EAAMI,iBAENwD,EAAuBrB,eACnBqB,EAAuBpB,OAAO,SAAU,CAExC,IAAMjD,EAAO,IAASnB,EAAmByG,kBAAkB,SAACC,EAAKC,GAC7D,IAAMC,EAASF,EAEf,OADAE,EAAOD,EAAK/D,MAAQ+D,EAAK9D,MAClB+D,IACR,IAGGC,EAAU,IAAO,EAAKvH,QAAQwH,WAAW,qBAAGjE,QAAsB1B,EAAK0F,WACvEE,EAAQF,GAAW,IAAOA,EAAQG,QAAQ,qBAAGnE,QAAsB1B,EAAK4F,SAC9E5F,EAAK8F,aAAeJ,EAAUA,EAAQK,KAAO/F,EAAK0F,QAClD1F,EAAKgG,uBAAyBJ,EAAQA,EAAMG,KAAO/F,EAAK4F,MAGxD5F,EAAKiG,qBAAuBjG,EAAKiG,mBAGjCC,YAAgB,EAAK/H,QAAS6B,GAAM,WAChCN,OAAOyG,SAASC,KAAO,EAAKjI,QAAQkI,qBACrC,WACCzE,YAAK,CACDC,KAAM,EAAK1D,QAAQmI,cACnB9E,KAAM,kB,EAO1BnC,8BAAA,SAA8Bb,GAC1B,IAAMwD,EAAkBC,YAAWzD,GAC7B+H,EAAmB,+BACnBC,EAAgBpE,YAAI,CACtBC,OAAQ,6CAENoE,EAAmBF,EAAN,oCACbG,EAAgBrI,EAAEoI,GAClBE,EAAsBJ,EAAN,gCAChBK,EAAmBvI,EAAEsI,GACrBE,EAAuBN,EAAN,uCACjBO,EAAoBzI,EAAEwI,GAEtBE,EAAmB1I,EADUkI,oEAInCC,EAAclE,IAAIN,GAEd0E,IACAF,EAAcvF,OAAOwF,GACrB5D,IAAWmE,mBAAmBR,EAAeC,IAG7CG,GAAoBE,IACpBN,EAAcvF,OAAO0F,GACrBH,EAAcvF,OAAO4F,GACrBhE,IAAWoE,sBACPT,EACAG,EACAE,EACA7H,KAAKC,sBACL,IAIJ8H,GACAP,EAAclE,IAAI,CACd4E,SAzB2BX,mEA0B3BY,SAAU,SAACC,EAAI9F,GACX,IAAI+F,GAAS,EAED,KAAR/F,GAAyC,KAA3BsF,EAAiBtF,QAC/B+F,GAAS,GAGbD,EAAGC,IAEPnE,aAAclE,KAAKb,QAAQmJ,kBAInCd,EAAclE,IAAI,CACd,CACI4E,SAAaX,EAAL,mCACRY,SAAU,SAACC,EAAI9F,GAGX8F,EAFe9F,EAAIlC,SAIvB8D,aAAclE,KAAKb,QAAQoJ,WAE/B,CACIL,SAAaX,EAAL,kCACRY,SAAU,SAACC,EAAI9F,GAGX8F,EAFe9F,EAAIlC,SAIvB8D,aAAclE,KAAKb,QAAQqJ,YAInChJ,EAAiBgB,GAAG,UAAU,SAAAiB,GAC1B+F,EAAcxD,eAEVwD,EAAcvD,OAAO,UAIzBxC,EAAMI,qB,EAIdV,wBAAA,SAAwBxB,GACpB,IAAM8I,EAAiBrF,YAAI,CACvBC,OAAQ,+CAGZoF,EAAenF,IAAI,CACf,CACI4E,SAAU,wDACVC,SAAU,SAACC,EAAI9F,GAGX8F,EAF+B,IAAhBM,OAAOpG,KAI1B4B,aAAclE,KAAKb,QAAQwJ,eAE/B,CACIT,SAAU,sDACVC,SAAU,SAACC,EAAI9F,GAGX8F,EAFe9F,EAAIlC,SAIvB8D,aAAclE,KAAKb,QAAQyJ,cAE/B,CACIV,SAAU,yDACVC,SAAU,SAACC,EAAI9F,GAGX8F,EAFe9F,EAAIlC,SAIvB8D,aAAclE,KAAKb,QAAQ0J,gBAInClJ,EAAWa,GAAG,UAAU,SAAAiB,GACpBgH,EAAezE,eAEXyE,EAAexE,OAAO,UAI1BxC,EAAMI,qB,GAzamBiH,M,kDCgBtBC,IA1BD,CACVC,MADU,SACJtG,GAEF,MADW,aACDuG,KAAKvG,IAQnBwG,SAXU,SAWDxG,GACL,OAAO1C,KAAKmJ,SAASzG,IASzByG,SArBU,SAqBDzG,GACL,OAAOA,EAAMtC,OAAS,K,0QClBxBgJ,EAAgB,CAClB,QACA,SACA,YA2DG,SAAS3J,EAAa4J,EAAcC,QAAc,IAAdA,MAAU,IACjD,IAAMC,EAAQlK,EAAEgK,GACVG,EAAUD,EAAMvH,KAAKoH,EAAcK,KAAK,OAFO,EAKXH,EAAlCI,sBAL6C,MAK5B,aAL4B,EAYrD,OAJAF,EAAQtH,MAAK,SAACyH,EAAIC,IA1DtB,SAAuBA,EAAOF,GAC1B,IAKIG,EALEtH,EAASlD,EAAEuK,GACXE,EAAavH,EAAOwH,OAAP,IAAkBL,GAC/BM,EAAUzH,EAAO0H,KAAK,WAAWC,cAEnCC,EAAeT,EAAN,KAAyBM,EAItC,GAAgB,UAAZA,EAAqB,CACrB,IAAMI,EAAY7H,EAAO0H,KAAK,QAE1B,IAAW,CAAC,QAAS,WAAY,UAAWG,GAE5CD,EAAeT,EAAN,KAAyB,IAAYU,GAG9CP,EAAoB,GAAGM,EAAY,IAAaC,GAKjDN,EACFO,SAASF,GACTE,SAASR,GAmCVS,CAAcV,EAAOF,MAGlBH,EAsBX,SAAShJ,EAAuBgK,GAC5B,IACMC,EAAkB,CACpBhI,KAAM,SACNC,KAAM,kBAlBd,SAAoBkB,GAChB,IAAM8G,EAAU9G,EAAOsG,KAAK,QAAQS,MAAM,YAE1C,OAAID,GAA8B,IAAnBA,EAAQrK,OACZqK,EAAQ,GAGZ,GAQSE,CAAWJ,GAIvB7H,MAAO,KAGX6H,EAAYK,MAAMvL,EAAE,YAAamL,IAGrC,IAAM3G,EAAa,CAMfmE,mBAAoB,SAAC6C,EAAWpH,GACxBA,GACAoH,EAAUvH,IAAI,CACV4E,SAAUzE,EACV0E,SAAU,SAACC,EAAI9F,GAGX8F,EAFeW,IAAMC,MAAM1G,KAI/B4B,aAAc,mCAa1B+D,sBAAuB,SAAC4C,EAAWlD,EAAkBE,EAAmBiD,EAAcC,GAClF,IAAMC,EAAY3L,EAAEsI,GACdsD,EAAsB,CACxB,CACI/C,SAAUP,EACVQ,SAAU,SAACC,EAAI9F,GACX,IAAM+F,EAAS/F,EAAIlC,OAEnB,GAAI2K,EACA,OAAO3C,GAAG,GAGdA,EAAGC,IAEPnE,aAAc,8BAElB,CACIgE,SAAUP,EACVQ,SAAU,SAACC,EAAI9F,GACX,IAAM+F,EAAS/F,EAAIoI,MAAM,IAAIQ,OAAOJ,EAAaK,SAC1C7I,EAAIoI,MAAM,IAAIQ,OAAOJ,EAAaM,WAClC9I,EAAIlC,QAAU0K,EAAaO,UAGlC,GAAIN,GAA6B,IAAfzI,EAAIlC,OAClB,OAAOgI,GAAG,GAGdA,EAAGC,IAEPnE,aAAc4G,EAAaQ,OAE/B,CACIpD,SAAUL,EACVM,SAAU,SAACC,EAAI9F,GACX,IAAM+F,EAAS/F,EAAIlC,OAEnB,GAAI2K,EACA,OAAO3C,GAAG,GAGdA,EAAGC,IAEPnE,aAAc,8BAElB,CACIgE,SAAUL,EACVM,SAAU,SAACC,EAAI9F,GAGX8F,EAFe9F,IAAQ0I,EAAU1I,QAIrC4B,aAAc,iCAItB2G,EAAUvH,IAAI2H,IAalBM,yBAA0B,SAACV,EAAWW,GAAc,IAE5CC,EAKAD,EALAC,cACAC,EAIAF,EAJAE,iBACArC,EAGAmC,EAHAnC,aACAsC,EAEAH,EAFAG,iBACAC,EACAJ,EADAI,iBAGJf,EAAUgB,UAAU,CAChBC,KAAMzC,EACN0C,eAAe,EACfC,aAAc,MAGlBnB,EAAUvH,IAAI,CACVY,aAAc,0CACdgE,SAAU0D,EACVzD,SAAU,WAAWyD,EAAb,IAAiCD,IAG7Cd,EAAUvH,IAAI,CACVY,aAAc,0CACdgE,SAAUyD,EACVxD,SAAU,WAAWyD,EAAb,IAAiCD,IAG7Cd,EAAUvH,IAAI,CACVY,aAAc,0BACdgE,SAAUyD,EACVxD,SAAU,aAGd0C,EAAUvH,IAAI,CACVY,aAAc,0BACdgE,SAAU0D,EACVzD,SAAU,aAGd0C,EAAUvH,IAAI,CACVY,aAAc,gCACdgE,SAAU,CAAC0D,EAAkBD,GAC7BxD,SAAU,iBAGd0C,EAAUoB,kBAAkB,CACxB/D,SAAU,CAAC0D,EAAkBD,GAC7B5B,OAAQ2B,EACRQ,UAAWT,KASnB3H,0BAA2B,SAAC+G,EAAWpH,GAC/BA,GACAoH,EAAUvH,IAAI,CACV4E,SAAUzE,EACV0E,SAAU,WACVjE,aAAc,iDAS1BH,uBAAwB,SAACN,GACrB,IAAM0I,EAAqB9M,EAAE,eAAgBoE,EAAMzC,KAAK,aAA5B,MAE5BoL,OAAOC,KAAKjJ,IAAIkJ,SAASC,SAAQ,SAAC7J,GAC1ByJ,EAAmBK,SAASpJ,IAAIkJ,QAAQ5J,KACxCyJ,EAAmBM,YAAYrJ,IAAIkJ,QAAQ5J,W,2JCjL5C,aAAUgK,EAAcvN,EAAcmK,EAASqD,QAAU,IAAjCxN,MAAU,IAQtB,mBAAZmK,IAEPqD,EAAWrD,EACXA,EAAU,IAIdjK,EAAE,qCAAqCmB,GAAG,UAAU,SAAAiB,GAChD,IAAMmL,EAAcvN,EAAEoC,EAAME,eAAeW,MAEvB,KAAhBsK,GAIJC,IAAMC,IAAIpG,QAAQqG,UAAUH,GAAa,SAACpJ,EAAKwJ,GAC3C,GAAIxJ,EAEA,OADAyJ,YAAe9N,EAAQ+N,aAChBP,EAASnJ,GAGpB,IAAM2J,EAAgB9N,EAAE,6BAExB,GAAK,IAAU2N,EAAShM,KAAK6F,QAMtB,CACH,IAAMuG,EAjGtB,SAA2BV,GACvB,IAAMW,EAAQ,IAAYX,EAAazC,KAAK,eAAe,SAAC5B,EAAQ7B,GAChE,IAAM8G,EAAMjF,EAGZ,OAFAiF,EAAI9G,EAAK/D,MAAQ+D,EAAK9D,MAEf4K,KAGLC,EAAwB,CAC1B/K,KAAM,OACNgL,GAAIH,EAAMG,GACV,aAAcH,EAAM,cACpBI,MAAO,aACPhL,KAAM4K,EAAM5K,KACZ,kBAAmB4K,EAAM,oBAG7BX,EAAagB,YAAYrO,EAAE,YAAakO,IAExC,IAAMI,EAActO,EAAE,6BAOtB,OAL2B,IAAvBsO,EAAYvN,SACZG,YAAuBoN,GACvBA,EAAYC,OAAO5L,KAAK,SAAS6L,QAG9BF,EAuEwBG,CAAkBX,GAErCR,EAAS,KAAMS,OATmB,CAElC,IAAMW,EAlItB,SAA2BrB,EAAcvN,GACrC,IAAMkO,EAAQ,IAAYX,EAAazC,KAAK,eAAe,SAAC5B,EAAQ7B,GAChE,IAAM8G,EAAMjF,EAEZ,OADAiF,EAAI9G,EAAK/D,MAAQ+D,EAAK9D,MACf4K,KAGLC,EAAwB,CAC1BC,GAAIH,EAAMG,GACV,aAAcH,EAAM,cACpBI,MAAO,cACPhL,KAAM4K,EAAM5K,KACZ,kBAAmB4K,EAAM,oBAG7BX,EAAagB,YAAYrO,EAAE,oBAAqBkO,IAEhD,IAAMI,EAActO,EAAE,6BAChB2O,EAAe3O,EAAE,6BAavB,OAX4B,IAAxB2O,EAAa5N,QACb4N,EAAa/L,SAG+B,IAA5C0L,EAAYC,OAAO5L,KAAK,SAAS5B,OAEjCuN,EAAYC,OAAOjL,OAAnB,UAAoCxD,EAAQ8O,SAA5C,YAEAN,EAAYC,OAAO5L,KAAK,SAASkM,OAG9BP,EAmG4BQ,CAAkBhB,EAAehO,IAzDxE,SAAoBiP,EAAaL,EAAgBzE,GAC7C,IAAM+E,EAAY,GAElBA,EAAUC,KAAV,oBAAmCF,EAAYG,OAA/C,aAEK,IAAUR,KACX,IAAOK,EAAYvH,QAAQ,SAAC2H,GACpBlF,EAAQmF,eACRJ,EAAUC,KAAV,kBAAiCE,EAAShB,GAA1C,KAAiDgB,EAAS/L,KAA1D,aAEA4L,EAAUC,KAAV,kBAAiCE,EAAS/L,KAA1C,KAAmD+L,EAAS/L,KAA5D,gBAIRsL,EAAeW,KAAKL,EAAU5E,KAAK,OA6C3BkF,CAAW3B,EAAShM,KAAM+M,EAAgBzE,GAC1CqD,EAAS,KAAMoB,a,sFCpD/B,SAASa,EAAgBC,GACrB,IAAM5L,EAAa4L,EAAqB7N,KAAK,cACvC8N,EAAmB,GACnBC,EAAoB,IAAIF,EAAqBtK,KAAK,MAExD,GAAwB,gBAApBtB,EAAWT,KAAwB,CACnC,IAAMwM,EA1Fd,SAA6BlF,EAAY7G,GAErC,GAAIA,EAAWgM,UAAYhM,EAAWiM,SAAU,CAC5C,IAAMC,EAAiB,sCAAsClM,EAAWgM,SAApD,QAAoEhM,EAAWiM,SAA/E,IACdE,EAAgBtF,EAAWvF,KAAK,MAChC8K,EAAWpM,EAAWgM,SAASK,MAAM,KACrCC,EAAWtM,EAAWiM,SAASI,MAAM,KACrCE,EAAU,IAAIC,KAAKJ,EAAS,GAAIA,EAAS,GAAK,EAAGA,EAAS,IAC1DK,EAAU,IAAID,KAAKF,EAAS,GAAIA,EAAS,GAAK,EAAGA,EAAS,IAEhE,MAAO,CACHrH,SAAU,IAAIkH,EAAN,6BACRO,YAAa,IAAIP,EAAN,mCACXjH,SAAU,SAACC,EAAI9F,GACX,IAAMsN,EAAMlH,OAAOoB,EAAW9H,KAAK,4BAA4BM,OACzDuN,EAAQnH,OAAOoB,EAAW9H,KAAK,8BAA8BM,OAAS,EACtEwN,EAAOpH,OAAOpG,GACdyN,EAAa,IAAIN,KAAKK,EAAMD,EAAOD,GAEzCxH,EAAG2H,GAAcP,GAAWO,GAAcL,IAE9CxL,aAAciL,IAqEKa,CAAoBnB,EAAsB5L,GAE7D+L,GACAF,EAAiBR,KAAKU,QAEnB/L,EAAWgL,UAAiC,mBAApBhL,EAAWT,MAAiD,gBAApBS,EAAWT,KAGlFqM,EAAqB7M,KAAK,2BAA2BE,MAAK,SAACC,EAAO8N,GAC9D,IAAMC,EAAgB7Q,EAAE4Q,GAClBjG,EAAUkG,EAAcC,IAAI,GAAGnG,QAC/BoG,EAAYF,EAAc3L,KAAK,QAC/B8L,EAAqBtB,EAAN,IAA2B/E,EAA3B,UAA4CoG,EAA5C,KAEG,eAApBnN,EAAWT,MACXsM,EAAiBR,KAtCjC,SAAoCrL,EAAY8L,GAC5C,IAAMI,EAAiB,iBAAiBlM,EAAWqN,MAA/B,oBAAwDrN,EAAWsN,IAAnE,QAA8EtN,EAAWuN,IAAzF,IACdD,EAAM7H,OAAOzF,EAAWsN,KACxBC,EAAM9H,OAAOzF,EAAWuN,KAE9B,MAAO,CACHtI,SAAa6G,EAAL,gBAAsC9L,EAAWR,KAAjD,KACR0F,SAAU,SAACC,EAAI9F,GACX,IAAMmO,EAAY/H,OAAOpG,GAEzB8F,EAAGqI,GAAaF,GAAOE,GAAaD,IAExCtM,aAAciL,GA0BgBuB,CAA2BzN,EAAY8L,IAE7D9L,EAAWgL,UACXa,EAAiBR,KAnDjC,SAAiCrL,EAAYiF,GACzC,MAAO,CACHA,WACAC,SAFG,SAEMC,EAAI9F,GACT8F,EAAG9F,EAAIlC,OAAS,IAEpB8D,aAAc,QAAQjB,EAAWqN,MAArB,4BA6CkBK,CAAwB1N,EAAYoN,OAZlEvB,EAAiBR,KAhEzB,SAAyCxE,EAAY7G,GACjD,IAAM2N,EAAc9G,EAAWvF,KAAK,MAE9BsM,EAAoB,IAAID,EAAP,SAEvB,MAAO,CACH1I,SAJoB,IAAI0I,EAAP,uBAKjBjB,YAAakB,EACb1I,SAAU,SAACC,GACP,IAAIC,GAAS,EAEbhJ,EAAEwR,GAAmB3O,MAAK,SAACC,EAAO2O,GAC9B,GAAIA,EAASC,QAGT,OAFA1I,GAAS,GAEF,KAIfD,EAAGC,IAEPnE,aAAc,QAAQjB,EAAWqN,MAArB,4BA2CUU,CAAgCnC,EAAsB5L,IAiBhF,OAAO6L,EAQI,aAAUvF,GACrB,IAAI0H,EAAuB,GAM3B,OAJA1H,EAAMvH,KAAK,qBAAqBE,MAAK,SAACC,EAAOyH,GACzCqH,EAAuBA,EAAqBC,OAAOtC,EAAgBvP,EAAEuK,QAGlEqH,K,yOC/GE1L,EAAiB,SAAA7C,GAAK,OAAIyO,IAAYC,KAAK5O,KAAK2O,IAAYC,KAAKC,MAAM3O,IAAQ,IAS/EwE,EAAkB,SAAC,EAAD,EA+B5BoK,EAAMC,GAAS,IAxDKhL,EACbE,EA0BN+K,EA6Bc,EA7BdA,YACAC,EA4Bc,EA5BdA,UACAC,EA2Bc,EA3BdA,UACAC,EA0Bc,EA1BdA,WAIAC,EAsBc,EAtBdA,YAGAC,EAmBc,EAnBdA,mBACA/L,EAkBc,EAlBdA,WACAgM,EAiBc,EAjBdA,aACA5L,EAgBc,EAhBdA,IACAe,EAec,EAfdA,mBAGA8K,EAYc,EAZdA,SACAC,EAWc,EAXdA,SACAC,EAUc,EAVdA,KACAC,EASc,EATdA,YACAlL,EAQc,EARdA,uBACAF,EAOc,EAPdA,aACAqL,EAMc,EANdA,QACAC,EAKc,EALdA,WACAC,EAIc,EAJdA,UACArJ,EAGc,EAHdA,MACAsJ,EAEc,EAFdA,MAGMC,EAASzM,EAAWwJ,MAAM,KAEhCjQ,EAAEmT,KAAK,CACHzR,IAAQyQ,EAAL,WAA2BE,EAA3B,cAAkDD,EAAlD,sBACHgB,SAAU,OACVC,OAAQ,OACRC,OAAO,EACPC,QAAS,CACLC,cAAelB,EACfmB,OAAQ,6BACR,eAAgB,8BAEpB9R,KAAM+R,KAAKC,UAAU,CACjBC,WAAY,CACRzQ,KAAM,OACN0Q,gBAAiBpB,EACjBqB,OAAQhC,IAAYC,KAAKC,MAAMQ,GAC/BuB,aAAcjC,IAAYrL,WAAW+J,MAAMwB,MAAMkB,EAAO,IACxDc,YAAalC,IAAYrL,WAAWgK,KAAKuB,MAAMkB,EAAO,IAAI,GAC1De,mBAAoBpN,GAExBqN,iBA9EWhN,EA8EqB,CAC5BwL,WACAC,WACAC,OACAC,cACAlL,yBACAF,eACAqL,UACAC,aACAC,YACArJ,QACAsJ,SAxFN7L,EAASF,EAEflH,EAAE6C,KAAKuE,GAAQ,SAAC+M,EAAK9Q,GACH,OAAVA,GAA4B,KAAVA,UACX+D,EAAO+M,MAIf/M,GAkFCmL,cACA3K,yBAGHqK,KAAKA,GACLC,KAAKA,IAGDkC,EAAa,CAKtBrN,0BAA2B,SAAA3C,GACnBA,GACApE,EAAEoE,GAAOjD,GAAG,SAAS,YAAgB,IAAb8E,EAAa,EAAbA,OACFA,EACR5C,MAAQyO,IAAYC,KAAKsC,OAAOvC,IAAYC,KAAKC,MAAM/L,EAAO5C,YASpF2D,oBAAqB,SAAA5C,GACbA,GACApE,EAAEoE,GAAOjD,GAAG,SAAS,YAAuB,IAApB8E,EAAoB,EAApBA,OAAQqO,EAAY,EAAZA,MACtBC,EAAYtO,EACJ,IAAVqO,GAAe,UAAU1K,KAAK3D,EAAO5C,OACrCkR,EAAUlR,MAAQ4C,EAAO5C,MAAMmR,MAAM,GAAI,GAClCvO,EAAO5C,MAAMtC,OAAS,EAC7BwT,EAAUlR,MAAQ4C,EAAO5C,MAAMmR,MAAM,EAAG,GACvB,IAAVF,IACPC,EAAUlR,MAAQ4C,EAAO5C,MACpBoR,QAAQ,qBAAsB,QAC9BA,QAAQ,qBAAsB,OAC9BA,QAAQ,oBAAqB,UAC7BA,QAAQ,+BAAgC,SACxCA,QAAQ,mBAAoB,KAC5BA,QAAQ,mBAAoB,IAC5BA,QAAQ,QAAS,WAO7BjQ,EAAa,CAOtB8B,8BAA+B,SAACkF,EAAWpH,EAAOS,GAC1CT,GACAoH,EAAUvH,IAAI,CACV4E,SAAUzE,EACV0E,SAAU,SAACC,EAAI9F,GAGX8F,EAFe9F,EAAIlC,QAAU+Q,IAAYC,KAAK2C,QAAQ5C,IAAYC,KAAKC,MAAM/O,MAIjF4B,kBAWZ2B,wBAAyB,SAACgF,EAAWpH,EAAOS,GACpCT,GACAoH,EAAUvH,IAAI,CACV4E,SAAUzE,EACV0E,SAAU,SAACC,EAAI9F,GACX,IAAMiQ,EAASjQ,EAAIgN,MAAM,KACrBjH,EAAS/F,EAAIlC,QAAU,gCAAgC6I,KAAK3G,GAGhE8F,EAFAC,EAASA,IAAW8I,IAAYrL,WAAWkO,OAAO7C,IAAYrL,WAAW+J,MAAMwB,MAAMkB,EAAO,IAAKpB,IAAYrL,WAAWgK,KAAKuB,MAAMkB,EAAO,IAAI,MAIlJrO,kBAWZ6B,wBAAyB,SAAC8E,EAAWpH,EAAOS,GACpCT,GACAoH,EAAUvH,IAAI,CACV4E,SAAUzE,EACV0E,SAAU,SAACC,EAAI9F,GAGX8F,IAFiB9F,EAAIlC,SAIzB8D,kBAYZ+B,iBAAkB,SAAC4E,EAAWpH,EAAOS,EAAciB,GAC3C1B,GACAoH,EAAUvH,IAAI,CACV4E,SAAUzE,EACV0E,SAAU,SAACC,EAAI9F,GACX,IAAME,EAA2B,mBAAb2C,EAA0BA,IAAaA,EAG3DiD,EAFe9F,EAAIlC,QAAU+Q,IAAY8C,IAAIF,QAAQzR,EAAKE,KAI9D0B,qB","file":"theme-bundle.chunk.10.js","sourcesContent":["import PageManager from './page-manager';\r\nimport _ from 'lodash';\r\nimport nod from './common/nod';\r\nimport Wishlist from './wishlist';\r\nimport validation from './common/form-validation';\r\nimport stateCountry from './common/state-country';\r\nimport { classifyForm, Validators, insertStateHiddenField } from './common/form-utils';\r\nimport { creditCardType, storeInstrument, Validators as CCValidators, Formatters as CCFormatters } from './common/payment-method';\r\nimport swal from './global/sweet-alert';\r\n\r\nexport default class Account extends PageManager {\r\n    constructor(context) {\r\n        super(context);\r\n\r\n        this.$state = $('[data-field-type=\"State\"]');\r\n        this.$body = $('body');\r\n    }\r\n\r\n    onReady() {\r\n        const $editAccountForm = classifyForm('form[data-edit-account-form]');\r\n        const $addressForm = classifyForm('form[data-address-form]');\r\n        const $inboxForm = classifyForm('form[data-inbox-form]');\r\n        const $accountReturnForm = classifyForm('[data-account-return-form]');\r\n        const $paymentMethodForm = classifyForm('form[data-payment-method-form]');\r\n        const $reorderForm = classifyForm('[data-account-reorder-form]');\r\n        const $invoiceButton = $('[data-print-invoice]');\r\n\r\n        // Injected via template\r\n        this.passwordRequirements = this.context.passwordRequirements;\r\n\r\n        // Instantiates wish list JS\r\n        Wishlist.load(this.context);\r\n\r\n        if ($editAccountForm.length) {\r\n            this.registerEditAccountValidation($editAccountForm);\r\n            if (this.$state.is('input')) {\r\n                insertStateHiddenField(this.$state);\r\n            }\r\n        }\r\n\r\n        if ($invoiceButton.length) {\r\n            $invoiceButton.on('click', () => {\r\n                const left = window.screen.availWidth / 2 - 450;\r\n                const top = window.screen.availHeight / 2 - 320;\r\n                const url = $invoiceButton.data('printInvoice');\r\n\r\n                window.open(url, 'orderInvoice', `width=900,height=650,left=${left},top=${top},scrollbars=1`);\r\n            });\r\n        }\r\n\r\n        if ($addressForm.length) {\r\n            this.initAddressFormValidation($addressForm);\r\n\r\n            if (this.$state.is('input')) {\r\n                insertStateHiddenField(this.$state);\r\n            }\r\n        }\r\n\r\n        if ($inboxForm.length) {\r\n            this.registerInboxValidation($inboxForm);\r\n        }\r\n\r\n        if ($accountReturnForm.length) {\r\n            this.initAccountReturnFormValidation($accountReturnForm);\r\n        }\r\n\r\n        if ($paymentMethodForm.length) {\r\n            this.initPaymentMethodFormValidation($paymentMethodForm);\r\n        }\r\n\r\n        if ($reorderForm.length) {\r\n            this.initReorderForm($reorderForm);\r\n        }\r\n\r\n        this.bindDeleteAddress();\r\n        this.bindDeletePaymentMethod();\r\n    }\r\n\r\n    /**\r\n     * Binds a submit hook to ensure the customer receives a confirmation dialog before deleting an address\r\n     */\r\n    bindDeleteAddress() {\r\n        $('[data-delete-address]').on('submit', event => {\r\n            const message = $(event.currentTarget).data('deleteAddress');\r\n\r\n            if (!window.confirm(message)) {\r\n                event.preventDefault();\r\n            }\r\n        });\r\n    }\r\n\r\n    bindDeletePaymentMethod() {\r\n        $('[data-delete-payment-method]').on('submit', event => {\r\n            const message = $(event.currentTarget).data('deletePaymentMethod');\r\n\r\n            if (!window.confirm(message)) {\r\n                event.preventDefault();\r\n            }\r\n        });\r\n    }\r\n\r\n    initReorderForm($reorderForm) {\r\n        $reorderForm.on('submit', event => {\r\n            const $productReorderCheckboxes = $('.account-listItem .form-checkbox:checked');\r\n            let submitForm = false;\r\n\r\n            $reorderForm.find('[name^=\"reorderitem\"]').remove();\r\n\r\n            $productReorderCheckboxes.each((index, productCheckbox) => {\r\n                const productId = $(productCheckbox).val();\r\n                const $input = $('<input>', {\r\n                    type: 'hidden',\r\n                    name: `reorderitem[${productId}]`,\r\n                    value: '1',\r\n                });\r\n\r\n                submitForm = true;\r\n\r\n                $reorderForm.append($input);\r\n            });\r\n\r\n            if (!submitForm) {\r\n                event.preventDefault();\r\n                swal({\r\n                    text: this.context.selectItem,\r\n                    type: 'error',\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    initAddressFormValidation($addressForm) {\r\n        const validationModel = validation($addressForm);\r\n        const stateSelector = 'form[data-address-form] [data-field-type=\"State\"]';\r\n        const $stateElement = $(stateSelector);\r\n        const addressValidator = nod({\r\n            submit: 'form[data-address-form] input[type=\"submit\"]',\r\n        });\r\n\r\n        addressValidator.add(validationModel);\r\n\r\n        if ($stateElement) {\r\n            let $last;\r\n\r\n            // Requests the states for a country with AJAX\r\n            stateCountry($stateElement, this.context, (err, field) => {\r\n                if (err) {\r\n                    throw new Error(err);\r\n                }\r\n\r\n                const $field = $(field);\r\n\r\n                if (addressValidator.getStatus($stateElement) !== 'undefined') {\r\n                    addressValidator.remove($stateElement);\r\n                }\r\n\r\n                if ($last) {\r\n                    addressValidator.remove($last);\r\n                }\r\n\r\n                if ($field.is('select')) {\r\n                    $last = field;\r\n                    Validators.setStateCountryValidation(addressValidator, field);\r\n                } else {\r\n                    Validators.cleanUpStateValidation(field);\r\n                }\r\n            });\r\n        }\r\n\r\n        $addressForm.on('submit', event => {\r\n            addressValidator.performCheck();\r\n\r\n            if (addressValidator.areAll('valid')) {\r\n                return;\r\n            }\r\n\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    initAccountReturnFormValidation($accountReturnForm) {\r\n        const errorMessage = $accountReturnForm.data('accountReturnFormError');\r\n\r\n        $accountReturnForm.on('submit', event => {\r\n            let formSubmit = false;\r\n\r\n            // Iterate until we find a non-zero value in the dropdown for quantity\r\n            $('[name^=\"return_qty\"]', $accountReturnForm).each((i, ele) => {\r\n                if (parseInt($(ele).val(), 10) !== 0) {\r\n                    formSubmit = true;\r\n\r\n                    // Exit out of loop if we found at least one return\r\n                    return true;\r\n                }\r\n            });\r\n\r\n            if (formSubmit) {\r\n                return true;\r\n            }\r\n\r\n            swal({\r\n                text: errorMessage,\r\n                type: 'error',\r\n            });\r\n\r\n            return event.preventDefault();\r\n        });\r\n    }\r\n\r\n    initPaymentMethodFormValidation($paymentMethodForm) {\r\n        // Inject validations into form fields before validation runs\r\n        $paymentMethodForm.find('#first_name.form-field').attr('data-validation', `{ \"type\": \"singleline\", \"label\": \"${this.context.firstNameLabel}\", \"required\": true, \"maxlength\": 0 }`);\r\n        $paymentMethodForm.find('#last_name.form-field').attr('data-validation', `{ \"type\": \"singleline\", \"label\": \"${this.context.lastNameLabel}\", \"required\": true, \"maxlength\": 0 }`);\r\n        $paymentMethodForm.find('#company.form-field').attr('data-validation', `{ \"type\": \"singleline\", \"label\": \"${this.context.companyLabel}\", \"required\": false, \"maxlength\": 0 }`);\r\n        $paymentMethodForm.find('#phone.form-field').attr('data-validation', `{ \"type\": \"singleline\", \"label\": \"${this.context.phoneLabel}\", \"required\": false, \"maxlength\": 0 }`);\r\n        $paymentMethodForm.find('#address1.form-field').attr('data-validation', `{ \"type\": \"singleline\", \"label\": \"${this.context.address1Label}\", \"required\": true, \"maxlength\": 0 }`);\r\n        $paymentMethodForm.find('#address2.form-field').attr('data-validation', `{ \"type\": \"singleline\", \"label\": \"${this.context.address2Label}\", \"required\": false, \"maxlength\": 0 }`);\r\n        $paymentMethodForm.find('#city.form-field').attr('data-validation', `{ \"type\": \"singleline\", \"label\": \"${this.context.cityLabel}\", \"required\": true, \"maxlength\": 0 }`);\r\n        $paymentMethodForm.find('#country.form-field').attr('data-validation', `{ \"type\": \"singleselect\", \"label\": \"${this.context.countryLabel}\", \"required\": true, prefix: \"${this.context.chooseCountryLabel}\" }`);\r\n        $paymentMethodForm.find('#state.form-field').attr('data-validation', `{ \"type\": \"singleline\", \"label\": \"${this.context.stateLabel}\", \"required\": true, \"maxlength\": 0 }`);\r\n        $paymentMethodForm.find('#postal_code.form-field').attr('data-validation', `{ \"type\": \"singleline\", \"label\": \"${this.context.postalCodeLabel}\", \"required\": true, \"maxlength\": 0 }`);\r\n\r\n        const validationModel = validation($paymentMethodForm);\r\n        const paymentMethodSelector = 'form[data-payment-method-form]';\r\n        const paymentMethodValidator = nod({ submit: `${paymentMethodSelector} input[type=\"submit\"]` });\r\n        const $stateElement = $(`${paymentMethodSelector} [data-field-type=\"State\"]`);\r\n\r\n        let $last;\r\n        // Requests the states for a country with AJAX\r\n        stateCountry($stateElement, this.context, (err, field) => {\r\n            if (err) {\r\n                throw new Error(err);\r\n            }\r\n\r\n            const $field = $(field);\r\n\r\n            if (paymentMethodValidator.getStatus($stateElement) !== 'undefined') {\r\n                paymentMethodValidator.remove($stateElement);\r\n            }\r\n\r\n            if ($last) {\r\n                paymentMethodValidator.remove($last);\r\n            }\r\n\r\n            if ($field.is('select')) {\r\n                $last = field;\r\n                Validators.setStateCountryValidation(paymentMethodValidator, field);\r\n            } else {\r\n                Validators.cleanUpStateValidation(field);\r\n            }\r\n        });\r\n\r\n        // Use credit card number input listener to highlight credit card type\r\n        let cardType;\r\n        $(`${paymentMethodSelector} input[name=\"credit_card_number\"]`).on('keyup', ({ target }) => {\r\n            cardType = creditCardType(target.value);\r\n            if (cardType) {\r\n                $(`${paymentMethodSelector} img[alt=\"${cardType}\"`).siblings().css('opacity', '.2');\r\n            } else {\r\n                $(`${paymentMethodSelector} img`).css('opacity', '1');\r\n            }\r\n        });\r\n\r\n        // Set of credit card validation\r\n        CCValidators.setCreditCardNumberValidation(paymentMethodValidator, `${paymentMethodSelector} input[name=\"credit_card_number\"]`, this.context.creditCardNumber);\r\n        CCValidators.setExpirationValidation(paymentMethodValidator, `${paymentMethodSelector} input[name=\"expiration\"]`, this.context.expiration);\r\n        CCValidators.setNameOnCardValidation(paymentMethodValidator, `${paymentMethodSelector} input[name=\"name_on_card\"]`, this.context.nameOnCard);\r\n        CCValidators.setCvvValidation(paymentMethodValidator, `${paymentMethodSelector} input[name=\"cvv\"]`, this.context.cvv, () => cardType);\r\n\r\n        // Set of credit card format\r\n        CCFormatters.setCreditCardNumberFormat(`${paymentMethodSelector} input[name=\"credit_card_number\"]`);\r\n        CCFormatters.setExpirationFormat(`${paymentMethodSelector} input[name=\"expiration\"`);\r\n\r\n        // Billing address validation\r\n        paymentMethodValidator.add(validationModel);\r\n\r\n        $paymentMethodForm.on('submit', event => {\r\n            event.preventDefault();\r\n            // Perform final form validation\r\n            paymentMethodValidator.performCheck();\r\n            if (paymentMethodValidator.areAll('valid')) {\r\n                // Serialize form data and reduce it to object\r\n                const data = _.reduce($paymentMethodForm.serializeArray(), (obj, item) => {\r\n                    const refObj = obj;\r\n                    refObj[item.name] = item.value;\r\n                    return refObj;\r\n                }, {});\r\n\r\n                // Assign country and state code\r\n                const country = _.find(this.context.countries, ({ value }) => value === data.country);\r\n                const state = country && _.find(country.states, ({ value }) => value === data.state);\r\n                data.country_code = country ? country.code : data.country;\r\n                data.state_or_province_code = state ? state.code : data.state;\r\n\r\n                // Default Instrument\r\n                data.default_instrument = !!data.default_instrument;\r\n\r\n                // Store credit card\r\n                storeInstrument(this.context, data, () => {\r\n                    window.location.href = this.context.paymentMethodsUrl;\r\n                }, () => {\r\n                    swal({\r\n                        text: this.context.generic_error,\r\n                        type: 'error',\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    registerEditAccountValidation($editAccountForm) {\r\n        const validationModel = validation($editAccountForm);\r\n        const formEditSelector = 'form[data-edit-account-form]';\r\n        const editValidator = nod({\r\n            submit: '${formEditSelector} input[type=\"submit\"]',\r\n        });\r\n        const emailSelector = `${formEditSelector} [data-field-type=\"EmailAddress\"]`;\r\n        const $emailElement = $(emailSelector);\r\n        const passwordSelector = `${formEditSelector} [data-field-type=\"Password\"]`;\r\n        const $passwordElement = $(passwordSelector);\r\n        const password2Selector = `${formEditSelector} [data-field-type=\"ConfirmPassword\"]`;\r\n        const $password2Element = $(password2Selector);\r\n        const currentPasswordSelector = `${formEditSelector} [data-field-type=\"CurrentPassword\"]`;\r\n        const $currentPassword = $(currentPasswordSelector);\r\n\r\n        // This only handles the custom fields, standard fields are added below\r\n        editValidator.add(validationModel);\r\n\r\n        if ($emailElement) {\r\n            editValidator.remove(emailSelector);\r\n            Validators.setEmailValidation(editValidator, emailSelector);\r\n        }\r\n\r\n        if ($passwordElement && $password2Element) {\r\n            editValidator.remove(passwordSelector);\r\n            editValidator.remove(password2Selector);\r\n            Validators.setPasswordValidation(\r\n                editValidator,\r\n                passwordSelector,\r\n                password2Selector,\r\n                this.passwordRequirements,\r\n                true,\r\n            );\r\n        }\r\n\r\n        if ($currentPassword) {\r\n            editValidator.add({\r\n                selector: currentPasswordSelector,\r\n                validate: (cb, val) => {\r\n                    let result = true;\r\n\r\n                    if (val === '' && $passwordElement.val() !== '') {\r\n                        result = false;\r\n                    }\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: this.context.currentPassword,\r\n            });\r\n        }\r\n\r\n        editValidator.add([\r\n            {\r\n                selector: `${formEditSelector} input[name='account_firstname']`,\r\n                validate: (cb, val) => {\r\n                    const result = val.length;\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: this.context.firstName,\r\n            },\r\n            {\r\n                selector: `${formEditSelector} input[name='account_lastname']`,\r\n                validate: (cb, val) => {\r\n                    const result = val.length;\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: this.context.lastName,\r\n            },\r\n        ]);\r\n\r\n        $editAccountForm.on('submit', event => {\r\n            editValidator.performCheck();\r\n\r\n            if (editValidator.areAll('valid')) {\r\n                return;\r\n            }\r\n\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    registerInboxValidation($inboxForm) {\r\n        const inboxValidator = nod({\r\n            submit: 'form[data-inbox-form] input[type=\"submit\"]',\r\n        });\r\n\r\n        inboxValidator.add([\r\n            {\r\n                selector: 'form[data-inbox-form] select[name=\"message_order_id\"]',\r\n                validate: (cb, val) => {\r\n                    const result = Number(val) !== 0;\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: this.context.enterOrderNum,\r\n            },\r\n            {\r\n                selector: 'form[data-inbox-form] input[name=\"message_subject\"]',\r\n                validate: (cb, val) => {\r\n                    const result = val.length;\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: this.context.enterSubject,\r\n            },\r\n            {\r\n                selector: 'form[data-inbox-form] textarea[name=\"message_content\"]',\r\n                validate: (cb, val) => {\r\n                    const result = val.length;\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: this.context.enterMessage,\r\n            },\r\n        ]);\r\n\r\n        $inboxForm.on('submit', event => {\r\n            inboxValidator.performCheck();\r\n\r\n            if (inboxValidator.areAll('valid')) {\r\n                return;\r\n            }\r\n\r\n            event.preventDefault();\r\n        });\r\n    }\r\n}\r\n","const forms = {\r\n    email(value) {\r\n        const re = /^.+@.+\\..+/;\r\n        return re.test(value);\r\n    },\r\n\r\n    /**\r\n     * Validates a password field\r\n     * @param value\r\n     * @returns {boolean}\r\n     */\r\n    password(value) {\r\n        return this.notEmpty(value);\r\n    },\r\n\r\n    /**\r\n     * validates if a field is empty\r\n     * @param value\r\n     * @returns {boolean}\r\n     *\r\n     */\r\n    notEmpty(value) {\r\n        return value.length > 0;\r\n    },\r\n};\r\n\r\nexport default forms;\r\n","import _ from 'lodash';\r\nimport nod from './nod';\r\nimport forms from './models/forms';\r\n\r\nconst inputTagNames = [\r\n    'input',\r\n    'select',\r\n    'textarea',\r\n];\r\n\r\n/**\r\n * Apply class name to an input element on its type\r\n * @param {object} input\r\n * @param {string} formFieldClass\r\n * @return {object} Element itself\r\n */\r\nfunction classifyInput(input, formFieldClass) {\r\n    const $input = $(input);\r\n    const $formField = $input.parent(`.${formFieldClass}`);\r\n    const tagName = $input.prop('tagName').toLowerCase();\r\n\r\n    let className = `${formFieldClass}--${tagName}`;\r\n    let specificClassName;\r\n\r\n    // Input can be text/checkbox/radio etc...\r\n    if (tagName === 'input') {\r\n        const inputType = $input.prop('type');\r\n\r\n        if (_.includes(['radio', 'checkbox', 'submit'], inputType)) {\r\n            // ie: .form-field--checkbox, .form-field--radio\r\n            className = `${formFieldClass}--${_.camelCase(inputType)}`;\r\n        } else {\r\n            // ie: .form-field--input .form-field--inputText\r\n            specificClassName = `${className}${_.capitalize(inputType)}`;\r\n        }\r\n    }\r\n\r\n    // Apply class modifier\r\n    return $formField\r\n        .addClass(className)\r\n        .addClass(specificClassName);\r\n}\r\n\r\n/**\r\n * Apply class name to each input element in a form based on its type\r\n * @example\r\n * // Before\r\n * <form id=\"form\">\r\n *     <div class=\"form-field\">\r\n *         <input type=\"text\">\r\n *     </div>\r\n *     <div class=\"form-field\">\r\n *         <select>...</select>\r\n *     </div>\r\n * </form>\r\n *\r\n * classifyForm('#form', { formFieldClass: 'form-field' });\r\n *\r\n * // After\r\n * <div class=\"form-field form-field--input form-field--inputText\">...</div>\r\n * <div class=\"form-field form-field--select\">...</div>\r\n *\r\n * @param {string|object} formSelector - selector or element\r\n * @param {object} options\r\n * @return {jQuery} Element itself\r\n */\r\nexport function classifyForm(formSelector, options = {}) {\r\n    const $form = $(formSelector);\r\n    const $inputs = $form.find(inputTagNames.join(', '));\r\n\r\n    // Obtain options\r\n    const { formFieldClass = 'form-field' } = options;\r\n\r\n    // Classify each input in a form\r\n    $inputs.each((__, input) => {\r\n        classifyInput(input, formFieldClass);\r\n    });\r\n\r\n    return $form;\r\n}\r\n\r\n/**\r\n * Get id from given field\r\n * @param {object} $field JQuery field object\r\n * @return {string}\r\n */\r\nfunction getFieldId($field) {\r\n    const fieldId = $field.prop('name').match(/(\\[.*\\])/);\r\n\r\n    if (fieldId && fieldId.length !== 0) {\r\n        return fieldId[0];\r\n    }\r\n\r\n    return '';\r\n}\r\n\r\n/**\r\n * Insert hidden field after State/Province field\r\n * @param {object} $stateField JQuery field object\r\n */\r\nfunction insertStateHiddenField($stateField) {\r\n    const fieldId = getFieldId($stateField);\r\n    const stateFieldAttrs = {\r\n        type: 'hidden',\r\n        name: `FormFieldIsText${fieldId}`,\r\n        value: '1',\r\n    };\r\n\r\n    $stateField.after($('<input />', stateFieldAttrs));\r\n}\r\n\r\nconst Validators = {\r\n    /**\r\n     * Sets up a new validation when the form is dirty\r\n     * @param validator\r\n     * @param field\r\n     */\r\n    setEmailValidation: (validator, field) => {\r\n        if (field) {\r\n            validator.add({\r\n                selector: field,\r\n                validate: (cb, val) => {\r\n                    const result = forms.email(val);\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: 'You must enter a valid email.',\r\n            });\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Validate password fields\r\n     * @param validator\r\n     * @param passwordSelector\r\n     * @param password2Selector\r\n     * @param requirements\r\n     * @param isOptional\r\n     */\r\n    setPasswordValidation: (validator, passwordSelector, password2Selector, requirements, isOptional) => {\r\n        const $password = $(passwordSelector);\r\n        const passwordValidations = [\r\n            {\r\n                selector: passwordSelector,\r\n                validate: (cb, val) => {\r\n                    const result = val.length;\r\n\r\n                    if (isOptional) {\r\n                        return cb(true);\r\n                    }\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: 'You must enter a password.',\r\n            },\r\n            {\r\n                selector: passwordSelector,\r\n                validate: (cb, val) => {\r\n                    const result = val.match(new RegExp(requirements.alpha))\r\n                        && val.match(new RegExp(requirements.numeric))\r\n                        && val.length >= requirements.minlength;\r\n\r\n                    // If optional and nothing entered, it is valid\r\n                    if (isOptional && val.length === 0) {\r\n                        return cb(true);\r\n                    }\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: requirements.error,\r\n            },\r\n            {\r\n                selector: password2Selector,\r\n                validate: (cb, val) => {\r\n                    const result = val.length;\r\n\r\n                    if (isOptional) {\r\n                        return cb(true);\r\n                    }\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: 'You must enter a password.',\r\n            },\r\n            {\r\n                selector: password2Selector,\r\n                validate: (cb, val) => {\r\n                    const result = val === $password.val();\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: 'Your passwords do not match.',\r\n            },\r\n        ];\r\n\r\n        validator.add(passwordValidations);\r\n    },\r\n\r\n    /**\r\n     * Validate password fields\r\n     * @param {Nod} validator\r\n     * @param {Object} selectors\r\n     * @param {string} selectors.errorSelector\r\n     * @param {string} selectors.fieldsetSelector\r\n     * @param {string} selectors.formSelector\r\n     * @param {string} selectors.maxPriceSelector\r\n     * @param {string} selectors.minPriceSelector\r\n     */\r\n    setMinMaxPriceValidation: (validator, selectors) => {\r\n        const {\r\n            errorSelector,\r\n            fieldsetSelector,\r\n            formSelector,\r\n            maxPriceSelector,\r\n            minPriceSelector,\r\n        } = selectors;\r\n\r\n        validator.configure({\r\n            form: formSelector,\r\n            preventSubmit: true,\r\n            successClass: '_', // KLUDGE: Don't apply success class\r\n        });\r\n\r\n        validator.add({\r\n            errorMessage: 'Min price must be less than max. price.',\r\n            selector: minPriceSelector,\r\n            validate: `min-max:${minPriceSelector}:${maxPriceSelector}`,\r\n        });\r\n\r\n        validator.add({\r\n            errorMessage: 'Min price must be less than max. price.',\r\n            selector: maxPriceSelector,\r\n            validate: `min-max:${minPriceSelector}:${maxPriceSelector}`,\r\n        });\r\n\r\n        validator.add({\r\n            errorMessage: 'Max. price is required.',\r\n            selector: maxPriceSelector,\r\n            validate: 'presence',\r\n        });\r\n\r\n        validator.add({\r\n            errorMessage: 'Min. price is required.',\r\n            selector: minPriceSelector,\r\n            validate: 'presence',\r\n        });\r\n\r\n        validator.add({\r\n            errorMessage: 'Input must be greater than 0.',\r\n            selector: [minPriceSelector, maxPriceSelector],\r\n            validate: 'min-number:0',\r\n        });\r\n\r\n        validator.setMessageOptions({\r\n            selector: [minPriceSelector, maxPriceSelector],\r\n            parent: fieldsetSelector,\r\n            errorSpan: errorSelector,\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Sets up a new validation when the form is dirty\r\n     * @param validator\r\n     * @param field\r\n     */\r\n    setStateCountryValidation: (validator, field) => {\r\n        if (field) {\r\n            validator.add({\r\n                selector: field,\r\n                validate: 'presence',\r\n                errorMessage: 'The \\'State/Province\\' field cannot be blank.',\r\n            });\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Removes classes from dirty form if previously checked\r\n     * @param field\r\n     */\r\n    cleanUpStateValidation: (field) => {\r\n        const $fieldClassElement = $((`[data-type=\"${field.data('fieldType')}\"]`));\r\n\r\n        Object.keys(nod.classes).forEach((value) => {\r\n            if ($fieldClassElement.hasClass(nod.classes[value])) {\r\n                $fieldClassElement.removeClass(nod.classes[value]);\r\n            }\r\n        });\r\n    },\r\n};\r\n\r\nexport { Validators, insertStateHiddenField };\r\n","import utils from '@bigcommerce/stencil-utils';\r\nimport _ from 'lodash';\r\nimport { insertStateHiddenField } from './form-utils';\r\nimport { showAlertModal } from '../global/modal';\r\n\r\n/**\r\n * If there are no options from bcapp, a text field will be sent. This will create a select element to hold options after the remote request.\r\n * @returns {jQuery|HTMLElement}\r\n */\r\nfunction makeStateRequired(stateElement, context) {\r\n    const attrs = _.transform(stateElement.prop('attributes'), (result, item) => {\r\n        const ret = result;\r\n        ret[item.name] = item.value;\r\n        return ret;\r\n    });\r\n\r\n    const replacementAttributes = {\r\n        id: attrs.id,\r\n        'data-label': attrs['data-label'],\r\n        class: 'form-select',\r\n        name: attrs.name,\r\n        'data-field-type': attrs['data-field-type'],\r\n    };\r\n\r\n    stateElement.replaceWith($('<select></select>', replacementAttributes));\r\n\r\n    const $newElement = $('[data-field-type=\"State\"]');\r\n    const $hiddenInput = $('[name*=\"FormFieldIsText\"]');\r\n\r\n    if ($hiddenInput.length !== 0) {\r\n        $hiddenInput.remove();\r\n    }\r\n\r\n    if ($newElement.prev().find('small').length === 0) {\r\n        // String is injected from localizer\r\n        $newElement.prev().append(`<small>${context.required}</small>`);\r\n    } else {\r\n        $newElement.prev().find('small').show();\r\n    }\r\n\r\n    return $newElement;\r\n}\r\n\r\n/**\r\n * If a country with states is the default, a select will be sent,\r\n * In this case we need to be able to switch to an input field and hide the required field\r\n */\r\nfunction makeStateOptional(stateElement) {\r\n    const attrs = _.transform(stateElement.prop('attributes'), (result, item) => {\r\n        const ret = result;\r\n        ret[item.name] = item.value;\r\n\r\n        return ret;\r\n    });\r\n\r\n    const replacementAttributes = {\r\n        type: 'text',\r\n        id: attrs.id,\r\n        'data-label': attrs['data-label'],\r\n        class: 'form-input',\r\n        name: attrs.name,\r\n        'data-field-type': attrs['data-field-type'],\r\n    };\r\n\r\n    stateElement.replaceWith($('<input />', replacementAttributes));\r\n\r\n    const $newElement = $('[data-field-type=\"State\"]');\r\n\r\n    if ($newElement.length !== 0) {\r\n        insertStateHiddenField($newElement);\r\n        $newElement.prev().find('small').hide();\r\n    }\r\n\r\n    return $newElement;\r\n}\r\n\r\n/**\r\n * Adds the array of options from the remote request to the newly created select box.\r\n * @param {Object} statesArray\r\n * @param {jQuery} $selectElement\r\n * @param {Object} options\r\n */\r\nfunction addOptions(statesArray, $selectElement, options) {\r\n    const container = [];\r\n\r\n    container.push(`<option value=\"\">${statesArray.prefix}</option>`);\r\n\r\n    if (!_.isEmpty($selectElement)) {\r\n        _.each(statesArray.states, (stateObj) => {\r\n            if (options.useIdForStates) {\r\n                container.push(`<option value=\"${stateObj.id}\">${stateObj.name}</option>`);\r\n            } else {\r\n                container.push(`<option value=\"${stateObj.name}\">${stateObj.name}</option>`);\r\n            }\r\n        });\r\n\r\n        $selectElement.html(container.join(' '));\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param {jQuery} stateElement\r\n * @param {Object} context\r\n * @param {Object} options\r\n * @param {Function} callback\r\n */\r\nexport default function (stateElement, context = {}, options, callback) {\r\n    /**\r\n     * Backwards compatible for three parameters instead of four\r\n     *\r\n     * Available options:\r\n     *\r\n     * useIdForStates {Bool} - Generates states dropdown using id for values instead of strings\r\n     */\r\n    if (typeof options === 'function') {\r\n        /* eslint-disable no-param-reassign */\r\n        callback = options;\r\n        options = {};\r\n        /* eslint-enable no-param-reassign */\r\n    }\r\n\r\n    $('select[data-field-type=\"Country\"]').on('change', event => {\r\n        const countryName = $(event.currentTarget).val();\r\n\r\n        if (countryName === '') {\r\n            return;\r\n        }\r\n\r\n        utils.api.country.getByName(countryName, (err, response) => {\r\n            if (err) {\r\n                showAlertModal(context.state_error);\r\n                return callback(err);\r\n            }\r\n\r\n            const $currentInput = $('[data-field-type=\"State\"]');\r\n\r\n            if (!_.isEmpty(response.data.states)) {\r\n                // The element may have been replaced with a select, reselect it\r\n                const $selectElement = makeStateRequired($currentInput, context);\r\n\r\n                addOptions(response.data, $selectElement, options);\r\n                callback(null, $selectElement);\r\n            } else {\r\n                const newElement = makeStateOptional($currentInput, context);\r\n\r\n                callback(null, newElement);\r\n            }\r\n        });\r\n    });\r\n}\r\n","/**\r\n * Validate that the given date for the day/month/year select inputs is within potential range\r\n * @param $formField\r\n * @param validation\r\n * @returns {{selector: string, triggeredBy: string, validate: Function, errorMessage: string}}\r\n */\r\nfunction buildDateValidation($formField, validation) {\r\n    // No date range restriction, skip\r\n    if (validation.min_date && validation.max_date) {\r\n        const invalidMessage = `Your chosen date must fall between ${validation.min_date} and ${validation.max_date}.`;\r\n        const formElementId = $formField.attr('id');\r\n        const minSplit = validation.min_date.split('-');\r\n        const maxSplit = validation.max_date.split('-');\r\n        const minDate = new Date(minSplit[0], minSplit[1] - 1, minSplit[2]);\r\n        const maxDate = new Date(maxSplit[0], maxSplit[1] - 1, maxSplit[2]);\r\n\r\n        return {\r\n            selector: `#${formElementId} select[data-label=\"year\"]`,\r\n            triggeredBy: `#${formElementId} select:not([data-label=\"year\"])`,\r\n            validate: (cb, val) => {\r\n                const day = Number($formField.find('select[data-label=\"day\"]').val());\r\n                const month = Number($formField.find('select[data-label=\"month\"]').val()) - 1;\r\n                const year = Number(val);\r\n                const chosenDate = new Date(year, month, day);\r\n\r\n                cb(chosenDate >= minDate && chosenDate <= maxDate);\r\n            },\r\n            errorMessage: invalidMessage,\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * We validate checkboxes separately from single input fields, as they must have at least one checked option\r\n * from many different inputs\r\n * @param $formField\r\n * @param validation\r\n */\r\nfunction buildRequiredCheckboxValidation($formField, validation) {\r\n    const formFieldId = $formField.attr('id');\r\n    const primarySelector = `#${formFieldId} input:first-of-type`;\r\n    const secondarySelector = `#${formFieldId} input`;\r\n\r\n    return {\r\n        selector: primarySelector,\r\n        triggeredBy: secondarySelector,\r\n        validate: (cb) => {\r\n            let result = false;\r\n\r\n            $(secondarySelector).each((index, checkbox) => {\r\n                if (checkbox.checked) {\r\n                    result = true;\r\n\r\n                    return false;\r\n                }\r\n            });\r\n\r\n            cb(result);\r\n        },\r\n        errorMessage: `The '${validation.label}' field cannot be blank.`,\r\n    };\r\n}\r\n\r\nfunction buildRequiredValidation(validation, selector) {\r\n    return {\r\n        selector,\r\n        validate(cb, val) {\r\n            cb(val.length > 0);\r\n        },\r\n        errorMessage: `The '${validation.label}' field cannot be blank.`,\r\n    };\r\n}\r\n\r\nfunction buildNumberRangeValidation(validation, formFieldSelector) {\r\n    const invalidMessage = `The value for ${validation.label} must be between ${validation.min} and ${validation.max}.`;\r\n    const min = Number(validation.min);\r\n    const max = Number(validation.max);\r\n\r\n    return {\r\n        selector: `${formFieldSelector} input[name=\"${validation.name}\"]`,\r\n        validate: (cb, val) => {\r\n            const numberVal = Number(val);\r\n\r\n            cb(numberVal >= min && numberVal <= max);\r\n        },\r\n        errorMessage: invalidMessage,\r\n    };\r\n}\r\n\r\n\r\nfunction buildValidation($validateableElement) {\r\n    const validation = $validateableElement.data('validation');\r\n    const fieldValidations = [];\r\n    const formFieldSelector = `#${$validateableElement.attr('id')}`;\r\n\r\n    if (validation.type === 'datechooser') {\r\n        const dateValidation = buildDateValidation($validateableElement, validation);\r\n\r\n        if (dateValidation) {\r\n            fieldValidations.push(dateValidation);\r\n        }\r\n    } else if (validation.required && (validation.type === 'checkboxselect' || validation.type === 'radioselect')) {\r\n        fieldValidations.push(buildRequiredCheckboxValidation($validateableElement, validation));\r\n    } else {\r\n        $validateableElement.find('input, select, textarea').each((index, element) => {\r\n            const $inputElement = $(element);\r\n            const tagName = $inputElement.get(0).tagName;\r\n            const inputName = $inputElement.attr('name');\r\n            const elementSelector = `${formFieldSelector} ${tagName}[name=\"${inputName}\"]`;\r\n\r\n            if (validation.type === 'numberonly') {\r\n                fieldValidations.push(buildNumberRangeValidation(validation, formFieldSelector));\r\n            }\r\n            if (validation.required) {\r\n                fieldValidations.push(buildRequiredValidation(validation, elementSelector));\r\n            }\r\n        });\r\n    }\r\n\r\n    return fieldValidations;\r\n}\r\n\r\n/**\r\n * Builds the validation model for dynamic forms\r\n * @param $form\r\n * @returns {Array}\r\n */\r\nexport default function ($form) {\r\n    let validationsToPerform = [];\r\n\r\n    $form.find('[data-validation]').each((index, input) => {\r\n        validationsToPerform = validationsToPerform.concat(buildValidation($(input)));\r\n    });\r\n\r\n    return validationsToPerform;\r\n}\r\n","import creditcards from 'creditcards';\r\n\r\n/**\r\n * Omit null or empty string properties of object\r\n * @param {Object} object\r\n * @returns {Object}\r\n */\r\nconst omitNullString = obj => {\r\n    const refObj = obj;\r\n\r\n    $.each(refObj, (key, value) => {\r\n        if (value === null || value === '') {\r\n            delete refObj[key];\r\n        }\r\n    });\r\n\r\n    return refObj;\r\n};\r\n\r\n/**\r\n * Get credit card type from credit card number\r\n * @param {string} value\r\n */\r\nexport const creditCardType = value => creditcards.card.type(creditcards.card.parse(value), true);\r\n\r\n/**\r\n * Wrapper for ajax request to store a new instrument in bigpay\r\n * @param {object} Representing the data needed for the header\r\n * @param {object} Representing the data needed for the body\r\n * @param {function} done Function to execute on a successful response\r\n * @param {function} fail Function to execute on a unsuccessful response\r\n */\r\nexport const storeInstrument = ({\r\n    // Hostname, Ids & Token\r\n    paymentsUrl,\r\n    shopperId,\r\n    storeHash,\r\n    vaultToken,\r\n}, {\r\n    /* eslint-disable */\r\n    // Provider Name\r\n    provider_id,\r\n\r\n    // Instrument Details\r\n    credit_card_number,\r\n    expiration,\r\n    name_on_card,\r\n    cvv,\r\n    default_instrument,\r\n\r\n    // Billing Address\r\n    address1,\r\n    address2,\r\n    city,\r\n    postal_code,\r\n    state_or_province_code,\r\n    country_code,\r\n    company,\r\n    first_name,\r\n    last_name,\r\n    email,\r\n    phone,\r\n    /* eslint-enable */\r\n}, done, fail) => {\r\n    const expiry = expiration.split('/');\r\n\r\n    $.ajax({\r\n        url: `${paymentsUrl}/stores/${storeHash}/customers/${shopperId}/stored_instruments`,\r\n        dataType: 'json',\r\n        method: 'POST',\r\n        cache: false,\r\n        headers: {\r\n            Authorization: vaultToken,\r\n            Accept: 'application/vnd.bc.v1+json',\r\n            'Content-Type': 'application/vnd.bc.v1+json',\r\n        },\r\n        data: JSON.stringify({\r\n            instrument: {\r\n                type: 'card',\r\n                cardholder_name: name_on_card,\r\n                number: creditcards.card.parse(credit_card_number),\r\n                expiry_month: creditcards.expiration.month.parse(expiry[0]),\r\n                expiry_year: creditcards.expiration.year.parse(expiry[1], true),\r\n                verification_value: cvv,\r\n            },\r\n            billing_address: omitNullString({\r\n                address1,\r\n                address2,\r\n                city,\r\n                postal_code,\r\n                state_or_province_code,\r\n                country_code,\r\n                company,\r\n                first_name,\r\n                last_name,\r\n                email,\r\n                phone,\r\n            }),\r\n            provider_id,\r\n            default_instrument,\r\n        }),\r\n    })\r\n        .done(done)\r\n        .fail(fail);\r\n};\r\n\r\nexport const Formatters = {\r\n    /**\r\n     * Sets up a format for credit card number\r\n     * @param field\r\n     */\r\n    setCreditCardNumberFormat: field => {\r\n        if (field) {\r\n            $(field).on('keyup', ({ target }) => {\r\n                const refTarget = target;\r\n                refTarget.value = creditcards.card.format(creditcards.card.parse(target.value));\r\n            });\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets up a format for expiration date\r\n     * @param field\r\n     */\r\n    setExpirationFormat: field => {\r\n        if (field) {\r\n            $(field).on('keyup', ({ target, which }) => {\r\n                const refTarget = target;\r\n                if (which === 8 && /.*(\\/)$/.test(target.value)) {\r\n                    refTarget.value = target.value.slice(0, -1);\r\n                } else if (target.value.length > 4) {\r\n                    refTarget.value = target.value.slice(0, 5);\r\n                } else if (which !== 8) {\r\n                    refTarget.value = target.value\r\n                        .replace(/^([1-9]\\/|[2-9])$/g, '0$1/')\r\n                        .replace(/^(0[1-9]|1[0-2])$/g, '$1/')\r\n                        .replace(/^([0-1])([3-9])$/g, '0$1/$2')\r\n                        .replace(/^(0[1-9]|1[0-2])([0-9]{2})$/g, '$1/$2')\r\n                        .replace(/^([0]+)\\/|[0]+$/g, '0')\r\n                        .replace(/[^\\d\\/]|^[\\/]*$/g, '')\r\n                        .replace(/\\/\\//g, '/');\r\n                }\r\n            });\r\n        }\r\n    },\r\n};\r\n\r\nexport const Validators = {\r\n    /**\r\n     * Sets up a validation for credit card number\r\n     * @param validator\r\n     * @param field\r\n     * @param errorMessage\r\n     */\r\n    setCreditCardNumberValidation: (validator, field, errorMessage) => {\r\n        if (field) {\r\n            validator.add({\r\n                selector: field,\r\n                validate: (cb, val) => {\r\n                    const result = val.length && creditcards.card.isValid(creditcards.card.parse(val));\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage,\r\n            });\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets up a validation for expiration date\r\n     * @param validator\r\n     * @param field\r\n     * @param errorMessage\r\n     */\r\n    setExpirationValidation: (validator, field, errorMessage) => {\r\n        if (field) {\r\n            validator.add({\r\n                selector: field,\r\n                validate: (cb, val) => {\r\n                    const expiry = val.split('/');\r\n                    let result = val.length && /^(0[1-9]|1[0-2])\\/([0-9]{2})$/.test(val);\r\n                    result = result && !creditcards.expiration.isPast(creditcards.expiration.month.parse(expiry[0]), creditcards.expiration.year.parse(expiry[1], true));\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage,\r\n            });\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets up a validation for name on card\r\n     * @param validator\r\n     * @param field\r\n     * @param errorMessage\r\n     */\r\n    setNameOnCardValidation: (validator, field, errorMessage) => {\r\n        if (field) {\r\n            validator.add({\r\n                selector: field,\r\n                validate: (cb, val) => {\r\n                    const result = !!val.length;\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage,\r\n            });\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets up a validation for cvv\r\n     * @param validator\r\n     * @param field\r\n     * @param errorMessage\r\n     * @param {any} cardType The credit card number type\r\n     */\r\n    setCvvValidation: (validator, field, errorMessage, cardType) => {\r\n        if (field) {\r\n            validator.add({\r\n                selector: field,\r\n                validate: (cb, val) => {\r\n                    const type = typeof cardType === 'function' ? cardType() : cardType;\r\n                    const result = val.length && creditcards.cvc.isValid(val, type);\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage,\r\n            });\r\n        }\r\n    },\r\n};\r\n"],"sourceRoot":""}