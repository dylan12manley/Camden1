{"version":3,"sources":["webpack:///./assets/js/theme/gift-certificate.js","webpack:///./assets/js/theme/common/models/forms.js","webpack:///./assets/js/theme/common/gift-certificate-validator.js"],"names":["GiftCertificate","context","$certBalanceForm","$","purchaseModel","val","length","formModel","email","$purchaseForm","$customAmounts","find","purchaseValidator","nod","submit","delay","$element","min","data","minFormatted","max","maxFormatted","add","selector","validate","cb","numberVal","Number","errorMessage","toName","toEmail","fromName","fromEmail","triggeredBy","certTheme","get","checked","agreeToTerms","balanceVal","checkCertBalanceValidator","on","performCheck","areAll","event","preventDefault","click","modal","defaultModal","previewUrl","currentTarget","serialize","open","api","getPage","err","content","updateContent","previewError","wrap","$balanceForm","balanceValidator","giftCertChecker","PageManager","forms","value","test","password","this","notEmpty","cert"],"mappings":"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","file":"theme-bundle.chunk.1.js","sourcesContent":["import PageManager from './page-manager';\r\nimport nod from './common/nod';\r\nimport giftCertChecker from './common/gift-certificate-validator';\r\nimport formModel from './common/models/forms';\r\nimport { api } from '@bigcommerce/stencil-utils';\r\nimport { defaultModal } from './global/modal';\r\n\r\nexport default class GiftCertificate extends PageManager {\r\n    constructor(context) {\r\n        super(context);\r\n\r\n        const $certBalanceForm = $('#gift-certificate-balance');\r\n\r\n        const purchaseModel = {\r\n            recipientName(val) {\r\n                return val.length;\r\n            },\r\n            recipientEmail(...args) {\r\n                return formModel.email(...args);\r\n            },\r\n            senderName(val) {\r\n                return val.length;\r\n            },\r\n            senderEmail(...args) {\r\n                return formModel.email(...args);\r\n            },\r\n            customAmount(value, min, max) {\r\n                return value && value >= min && value <= max;\r\n            },\r\n            setAmount(value, options) {\r\n                let found = false;\r\n\r\n                options.forEach((option) => {\r\n                    if (option === value) {\r\n                        found = true;\r\n                        return false;\r\n                    }\r\n                });\r\n\r\n                return found;\r\n            },\r\n        };\r\n\r\n        const $purchaseForm = $('#gift-certificate-form');\r\n        const $customAmounts = $purchaseForm.find('input[name=\"certificate_amount\"]');\r\n        const purchaseValidator = nod({\r\n            submit: '#gift-certificate-form input[type=\"submit\"]',\r\n            delay: 300,\r\n        });\r\n\r\n        if ($customAmounts.length) {\r\n            const $element = $purchaseForm.find('input[name=\"certificate_amount\"]');\r\n            const min = $element.data('min');\r\n            const minFormatted = $element.data('minFormatted');\r\n            const max = $element.data('max');\r\n            const maxFormatted = $element.data('maxFormatted');\r\n\r\n            purchaseValidator.add({\r\n                selector: '#gift-certificate-form input[name=\"certificate_amount\"]',\r\n                validate: (cb, val) => {\r\n                    const numberVal = Number(val);\r\n\r\n                    if (!numberVal) {\r\n                        cb(false);\r\n                    }\r\n\r\n                    cb(numberVal >= min && numberVal <= max);\r\n                },\r\n                errorMessage: `You must enter a certificate amount between ${minFormatted} and ${maxFormatted}.`,\r\n            });\r\n        }\r\n\r\n        purchaseValidator.add([\r\n            {\r\n                selector: '#gift-certificate-form input[name=\"to_name\"]',\r\n                validate: (cb, val) => {\r\n                    const result = purchaseModel.recipientName(val);\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: this.context.toName,\r\n            },\r\n            {\r\n                selector: '#gift-certificate-form input[name=\"to_email\"]',\r\n                validate: (cb, val) => {\r\n                    const result = purchaseModel.recipientEmail(val);\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: this.context.toEmail,\r\n            },\r\n            {\r\n                selector: '#gift-certificate-form input[name=\"from_name\"]',\r\n                validate: (cb, val) => {\r\n                    const result = purchaseModel.senderName(val);\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: this.context.fromName,\r\n            },\r\n            {\r\n                selector: '#gift-certificate-form input[name=\"from_email\"]',\r\n                validate: (cb, val) => {\r\n                    const result = purchaseModel.senderEmail(val);\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: this.context.fromEmail,\r\n            },\r\n            {\r\n                selector: '#gift-certificate-form input[name=\"certificate_theme\"]:first-of-type',\r\n                triggeredBy: '#gift-certificate-form input[name=\"certificate_theme\"]',\r\n                validate: (cb) => {\r\n                    const val = $purchaseForm.find('input[name=\"certificate_theme\"]:checked').val();\r\n\r\n                    cb(typeof (val) === 'string');\r\n                },\r\n                errorMessage: this.context.certTheme,\r\n            },\r\n            {\r\n                selector: '#gift-certificate-form input[name=\"agree\"]',\r\n                validate: (cb) => {\r\n                    const val = $purchaseForm.find('input[name=\"agree\"]').get(0).checked;\r\n\r\n                    cb(val);\r\n                },\r\n                errorMessage: this.context.agreeToTerms,\r\n            },\r\n            {\r\n                selector: '#gift-certificate-form input[name=\"agree2\"]',\r\n                validate: (cb) => {\r\n                    const val = $purchaseForm.find('input[name=\"agree2\"]').get(0).checked;\r\n\r\n                    cb(val);\r\n                },\r\n                errorMessage: this.context.agreeToTerms,\r\n            },\r\n        ]);\r\n\r\n        if ($certBalanceForm.length) {\r\n            const balanceVal = this.checkCertBalanceValidator($certBalanceForm);\r\n\r\n            $certBalanceForm.on('submit', () => {\r\n                balanceVal.performCheck();\r\n\r\n                if (!balanceVal.areAll('valid')) {\r\n                    return false;\r\n                }\r\n            });\r\n        }\r\n\r\n        $purchaseForm.on('submit', event => {\r\n            purchaseValidator.performCheck();\r\n\r\n            if (!purchaseValidator.areAll('valid')) {\r\n                return event.preventDefault();\r\n            }\r\n        });\r\n\r\n        $('#gift-certificate-preview').click(event => {\r\n            event.preventDefault();\r\n\r\n            purchaseValidator.performCheck();\r\n\r\n            if (!purchaseValidator.areAll('valid')) {\r\n                return;\r\n            }\r\n\r\n            const modal = defaultModal();\r\n            const previewUrl = `${$(event.currentTarget).data('previewUrl')}&${$purchaseForm.serialize()}`;\r\n\r\n            modal.open();\r\n\r\n            api.getPage(previewUrl, {}, (err, content) => {\r\n                if (err) {\r\n                    return modal.updateContent(this.context.previewError);\r\n                }\r\n\r\n                modal.updateContent(content, { wrap: true });\r\n            });\r\n        });\r\n    }\r\n\r\n    checkCertBalanceValidator($balanceForm) {\r\n        const balanceValidator = nod({\r\n            submit: $balanceForm.find('input[type=\"submit\"]'),\r\n        });\r\n\r\n        balanceValidator.add({\r\n            selector: $balanceForm.find('input[name=\"giftcertificatecode\"]'),\r\n            validate(cb, val) {\r\n                cb(giftCertChecker(val));\r\n            },\r\n            errorMessage: 'You must enter a certificate code.',\r\n        });\r\n\r\n        return balanceValidator;\r\n    }\r\n}\r\n","const forms = {\r\n    email(value) {\r\n        const re = /^.+@.+\\..+/;\r\n        return re.test(value);\r\n    },\r\n\r\n    /**\r\n     * Validates a password field\r\n     * @param value\r\n     * @returns {boolean}\r\n     */\r\n    password(value) {\r\n        return this.notEmpty(value);\r\n    },\r\n\r\n    /**\r\n     * validates if a field is empty\r\n     * @param value\r\n     * @returns {boolean}\r\n     *\r\n     */\r\n    notEmpty(value) {\r\n        return value.length > 0;\r\n    },\r\n};\r\n\r\nexport default forms;\r\n","export default function (cert) {\r\n    if (typeof cert !== 'string') {\r\n        return false;\r\n    }\r\n\r\n    // Add any custom gift certificate validation logic here\r\n    return true;\r\n}\r\n"],"sourceRoot":""}